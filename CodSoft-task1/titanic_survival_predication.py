# -*- coding: utf-8 -*-
"""Titanic Survival Predication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zHmY_Nt_iQe-fz8ag6oTxGIjKG6K5OP5

Import The Libaries
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score , classification_report
from sklearn.metrics import confusion_matrix

"""Load The Dataset"""

titanic_data = pd.read_csv("/tested.csv")
titanic_data.head()

"""Data Analysis"""

titanic_data.shape

titanic_data.info()

"""Managing The Missing Values"""

titanic_data.isnull().sum()

titanic_data=titanic_data.drop(["Cabin"],axis=1)

titanic_data["Age"]=titanic_data["Age"].fillna(titanic_data["Age"].mean())

titanic_data["Fare"]=titanic_data["Fare"].fillna(titanic_data["Fare"].mean())

titanic_data.isnull().sum()

"""Exploratory Data Analysis"""

titanic_data["Survived"].value_counts()

sns.countplot(x='Survived',data=titanic_data)
plt.show()

titanic_data['Sex'].value_counts()

sns.countplot(x='Sex',hue='Survived',data=titanic_data)
plt.show()

sns.countplot(x='Pclass',hue='Survived',data=titanic_data)
plt.show()

sns.barplot(x='Survived',y='Age',data=titanic_data)
plt.show()

sns.barplot(x='Survived',y='Fare',data=titanic_data)
plt.show()

titanic_data["Sex"]=titanic_data["Sex"].replace({"male":0,"female":1})

titanic_data["Embarked"]=titanic_data["Embarked"].replace({"S":0,"C":1,"Q":2})

titanic_data.head()

"""Dividing The Dataset into The Independent And Dependent Variable"""

x=titanic_data.drop(["Survived","PassengerId","Name","Ticket"],axis=1)
y=titanic_data["Survived"]

"""Split into a Train data and Test Data"""

x_train , x_test , y_train ,y_test = train_test_split(x,y,train_size=0.8,random_state=42)

"""Applying Logistic Regression"""

model=LogisticRegression(solver="lbfgs",max_iter=1000)
model.fit(x_train,y_train)

model.predict(x_test)

model.score(x_test,y_test)

"""Confusion Matrix"""

y_pred=model.predict(x_test)
cm=confusion_matrix(y_test,y_pred)
cm

"""Visualization of Confusion Matrix"""

sns.heatmap(cm,annot=True)
plt.xlabel("predicted value")
plt.ylabel("actual value")
plt.show()

"""Check The Accuracy, Recall, Precision and F1-score"""

print(classification_report(y_pred,y_test))