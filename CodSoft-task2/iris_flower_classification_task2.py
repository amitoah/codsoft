# -*- coding: utf-8 -*-
"""Iris Flower Classification Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lfM-tU2_1Aqx1E1_bUHjHvpBmV5PUru-

Import The Libraies
"""

from numpy.matrixlib.defmatrix import matrix
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.tree import plot_tree

"""Load The Dataset"""

iris_data = pd.read_csv("/content/IRIS.csv")
iris_data.head()

"""Data Analysis"""

sns.FacetGrid(iris_data,hue="species",height=6).map(sns.scatterplot,"sepal_length","sepal_width").add_legend()
plt.show()

sns.FacetGrid(iris_data,hue="species",height=5).map(sns.scatterplot,"petal_length","petal_width").add_legend()
plt.show()

"""Check The Null Values"""

iris_data.isnull().values.any()

iris_data["species"].unique()

iris_data['species'].value_counts()

"""Data Preprocessing"""

iris_data['species']= LabelEncoder().fit_transform(iris_data["species"])

iris_data[iris_data.species==0].head()

iris_data[iris_data.species==1].head()

iris_data[iris_data.species==2].head()

setosa = iris_data[:50]
versicolor = iris_data[50:100]
virginica = iris_data[100:]

"""Exploratory Data Analysis"""

sns.scatterplot(x="sepal_length",y="sepal_width",data=setosa,color="red",marker="*")
sns.scatterplot(x="sepal_length",y="sepal_width",data=versicolor,color="blue", marker=".")

plt.show()

sns.scatterplot(x="sepal_length",y="petal_width",data=virginica,color="green",marker="*")
sns.scatterplot(x="sepal_length",y="petal_width",data=versicolor,color="blue", marker=".")

plt.show()

sns.pairplot(iris_data,hue='species',size=2)
plt.show()

"""Dividing The Dataset into The Independent and Dependent Variable"""

x= iris_data.drop(["species"],axis=1)
y=iris_data["species"]

"""Split The Dataset into The Training & Testing Data"""

x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.7,random_state=42)

len(x_train)

len(x_test)

"""Applying KNN Algorithim"""

knn=KNeighborsClassifier(n_neighbors=13)
knn.fit(x_train,y_train)
knn.predict(x_test)

knn.score(x_test,y_test)

"""Confusion Matrix"""

y_pred = knn.predict(x_test)
cn= confusion_matrix(y_test,y_pred)
print(cn)

"""Visualization of Confusion Matrix"""

sns.heatmap(cn,annot=True)
plt.xlabel("predicted value")
plt.ylabel("actual value")
plt.show()

"""Check The Accuracy, Precision, Recall and F1-score"""

print(classification_report(y_test,y_pred))

"""Applying Logistic Regression"""

lgr=LogisticRegression()
lgr.fit(x_train,y_train)

lgr.predict(x_test)

lgr.score(x_test,y_test)

y1_pred=lgr.predict(x_test)

"""Confusion Matrix"""

cnn1=confusion_matrix(y_test,y1_pred)
cnn1

"""Visualization of Confusion Matrix"""

sns.heatmap(cnn1,annot=True)
plt.xlabel("predicted values")
plt.ylabel("actual values")
plt.show()

"""Check The Accuracy, Precision, Recall and F1-score"""

print(classification_report(y_test,y1_pred))

"""Applying Decision Tree Alorithm"""

tree_model=DecisionTreeClassifier(criterion="gini",max_depth=2)

tree_model.fit(x_train,y_train)
tree_model.predict(x_test)

tree_model.score(x_test,y_test)

y_pred2=tree_model.predict(x_test)

"""Confusion Matrix"""

cm2=confusion_matrix(y_test,y_pred2)
cm2

"""Check The Accuracy, Precision, Recell and F1-score"""

print(classification_report(y_test,y_pred2))

"""Visulizing Decision Tree"""

vis_model=plot_tree(tree_model)
vis_model